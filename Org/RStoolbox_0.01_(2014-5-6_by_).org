+ Package: RStoolbox
+ Type: Package
+ Title: RStoolbox: A Collection of Remote Sensing Tools
+ Version: 0.01
+ Date: 2014-5-6
+ Authors@R: c( person("Benjamin", "Leutner", role = c("cre", "aut"), email =
+     "benjamin.leutner@uni-wuerzburg.de"), person("Ned", "Horning", role =
+     c("aut"), email = "horning@amnh.org"), person("Martin", "Wegmann", role =
+     c("aut"), email = "martin.wegmann@uni-wuerzburg.de"))
+ Description: RStoolbox provides remote sensing methods for image processing and
+     classification such as spectral indices, supervised classification or
+     fractional cover.
+ Depends:
+     R (>= 3.1.0)
+ Imports:
+     stringr,
+     raster,
+     randomForest
+ License: GPL (>=3)
+ LazyData: true
* cloudMask.R
#+BEGIN_SRC R 
cloudMask <- function(x, threshold, minCloudSize, windowSize1 = 5, windowSize2 = 11, maskGrowing = TRUE, sanitize = TRUE, lowBand = B1, tirBand = B6, plot = TRUE, verbose = TRUE, returnDiffLayer = FALSE){
	
	
	op <- par(mfrow = c(2, 1 + sum(sanitize, maskGrowing)))
	
	
	if(CDIFF %in% names(x)) {
		if(verbose) message(Re-using CDIFF layer from previous run.)
		cdiff <- x[[CDIFF]]
	} else {
		cdiff <- x[[lowBand]] - x[[tirBand]]
		names(cdiff) <- CDIFF
	}
	
	
	if(missing(threshold)) {
		threshold <- quantile(cdiff@data@max:cdiff@data@min, 0.45)
		if(verbose) {message(paste0(Estimated cloud threshold should be between , round(cdiff@data@min),  and , round(cdiff@data@max)) )
			message(paste0(Guessed threshold (rounded): , round(threshold)))
		}
	}
	if(threshold < cdiff@data@min | threshold > cdiff@data@max) warning(Threshold is not within the estimated data range, call. = FALSE)
	
	if(plot) plot(cdiff, main = Cloud layer: blue - tir difference)
	
	
	if(verbose) message(Begin thresholding)
	cmask <- cdiff > threshold
	cmask <- mask(cmask, cmask, maskvalue = 0)
	
	if(plot) plot(cmask, main = paste0(Cloud mask\nThreshold: , threshold))
	
	
	
	if(sanitize) {
		if(verbose) message(Begin sanitzing)
		if(missing(minCloudSize)) minCloudSize <- windowSize1 ^ 2
		w <- matrix(ncol = windowSize1, nrow = windowSize1, 1)
		if(minCloudSize >= windowSize^2) {
			cmod <- focal(cmask, w, na.rm = FALSE)
		} else {
			cmod <- focal(cmask, w, na.rm = TRUE)	
			cmod[cmod < minCloudSize] <- NA		
		}
		cmod[cmod < minCloudSize] <- NA
		cmod[!is.na(cmod)] <- 1L
		if(plot) plot(cmod, main = Sanitized cloud mask)
		
	}
	
	
	if(maskGrowing){
		if(verbose) message(Begin region-growing)
		w <- matrix(ncol = windowSize2, nrow = windowSize2, 1)
		cmod <- focal(cmod, w, na.rm = TRUE )
		cmod[!is.na(cmod)] <- 1L
		if(plot) plot(cmod, main = Region-grown cloud mask)
		
	}
	
	if(plot){
		plotRGB(x, 1, 2, 3, title = Final mask, stretch = lin)
		plot(cmod,  legend = FALSE, add = T, col = yellow)
	}
	
	
	par(op)
	
	
	names(cmod) <- CMASK
	if(returnDiffLayer) cmod <- stack(cmod, cdiff)
	return(cmod)	
}
#+END_SRC
* estimateSHV.R
#+BEGIN_SRC R 
estimateSHV <- function(x, hazeBand, darkProp = 0.02, plot = FALSE, returnTables = TRUE) {
	
	
	if(inherits(x, Raster)) {
		preCalc <- FALSE
	} else {
		if(is.list(x) & table %in% names(x)) {
			preCalc <- TRUE 
		} else {
			stop(x must be a Raster* object or the result of a previous run of estimateSHV(Raster*, ) with argument 'returnTables = TRUE', call. = FALSE)
		}	
	}
	
	if(!preCalc){
		if(missing(hazeBand)){ 
			if(nlayers(x) == 1) {
				hazeBand <- names(x)        
			} else {
				stop(Please specify the band from which you want to estimate the haze dn)
			}	
			if(is.numeric(hazeBand)) hazeBand <- names(x)[hazeBand]
		}
		
	} else {
		
		if(is.numeric(hazeBand)) hazeBand <- names(x$table)[hazeBand]
		preCalcAvail <- hazeBand %in% names(x$table)
		if(!any(preCalcAvail)) 	stop(Cannot estimate SHV because tables are missing for all specified bands, call. = FALSE)
		
		if(any(!preCalcAvail)) {
			warning(paste0(Cannot estimate SHV for >> , hazeBand[!preCalcAvail],  << because tables are missing.), call. = FALSE)
			hazeBand <- hazeBand[preCalcAvail] 				
		}	
	}
	
	
	multiple <- if(length(hazeBand) > 1) TRUE else FALSE
	
	
	out   <- lapply(hazeBand, function(bi) {
				if(inherits(x, Raster)) {
					tf <- freq(x[[bi]], useNA = no) 
				} else {
					if(is.list(x) & table %in% names(x)) {
						preCalc <- TRUE
						tf <- x$table[[bi]]
					} else {
						stop(x must be a Raster* object or the result of a previous run of estimateSHV() with argument 'returnTables = TRUE', call. = FALSE)
					}
				}
				tf <- tf[tf[,1] > 0,]
				tf[,2] <- tf[,2]/sum(tf[,2])
				dtf <- c(diff(tf[,2]),0) / c(diff(tf[,1]),0)
				
				SHV <- tf[which(dtf > darkProp)[1], 1] 
				if(is.na(SHV)) warning(paste(darkProp for band, bi, was chosen too high. It exceeds the value range.), call. = FALSE)
				
				if(plot){
					if(multiple) x11()
					par(mfrow = c(1,2))
					
					plot(tf, xlab = DN, ylab = Frequency, type = l, main = bi)
					abline(v = tf[tf[,1]==SHV,1], col=red)
					text(SHV, max(tf[,2]), pos=4, label = paste0(SHV_DN = , SHV), col =red)
					
					plot(dtf, type=l, xlab = DN, ylab = diff(Frequency), main = bi)
					abline(v = tf[tf[,1]==SHV,1], col=red)
					abline(h = darkProp, col = #00000070, lty = 2)
					text(max(tf[,1]), darkProp, label = paste0(darkProp = , darkProp), col = #00000070)
					text(SHV, max(dtf, na.rm = TRUE), pos=4, label = paste0(SHV_DN = , SHV), col =red)
					
				}
				
				return(list(table = tf, SHV = SHV))
			})
	
	SHV <- unlist(sapply(out, [, 2))
	names(SHV) <- hazeBand
	
	if(!preCalc){
		table <- sapply(out, [, 1)
		names(table) <- hazeBand
	} else {
		table <- x$table
	}
	return( if(!returnTables) SHV else list(SHV=SHV, table = table))
}
#+END_SRC
* internalFunctions.R
#+BEGIN_SRC R 
.ESdist <- function(adate){	
	edist <- julian(as.Date(adate), origin=as.Date(paste(substring(adate, 1, 4), 12, 31, sep=-)))[[1]]
	 1 - 0.016729 * cos((2*pi) * (0.9856 * (edist - 4)/360))
}
.getNumeric <- function(x, returnNumeric = TRUE) {
	sapply(x, function(xi){
				d <- strsplit(xi, [^[:digit:]])[[1]]
				d <- if(returnNumeric) as.numeric(d[d!=]) else d[d!=]
				d
			})
}
#+END_SRC
* radCor.R
#+BEGIN_SRC R 
	
	if(!reflectance & method != APREF){
radCor <-	function(x, metaData, reflectance = TRUE, thermal = TRUE, satellite, bandSet = full, gain, offset, G_rescale, B_rescale,
		sunElev, satZenith = 0, d, esun, date, SHV, hazeBand, atHaze,  method = APREF){
	
	
	if(!method %in% c(APREF, DOS, COSTZ, SDOS)) stop(method must be one of 'APREF', 'DOS', 'COSTZ' 'SDOS', call.=FALSE)
	
	if(!reflectance & method != APREF){
		warning(For radiance calculations the 'method' argument is ignored)
		method <- APREF
	}
	
	if(!missing(metaData)) {
		
		
		if(is.character(metaData)) metaData <- readMeta(metaData)
		
		satellite 	<- metaData$UNIFIED_METADATA$SPACECRAFT_ID
		sensor 		<- metaData$UNIFIED_METADATA$SENSOR_ID
		B_rescale	<- metaData$UNIFIED_METADATA$RAD_OFFSET
		G_rescale	<- metaData$UNIFIED_METADATA$RAD_GAIN
		d			<- metaData$UNIFIED_METADATA$EARTH_SUN_DISTANCE
		sunElev		<- metaData$UNIFIED_METADATA$SUN_ELEVATION
		rad 		<- metaData$UNIFIED_METADATA$RADIOMETRIC_RES
		K1			<- metaData$UNIFIED_METADATA$K1
		K2			<- metaData$UNIFIED_METADATA$K2
		
	} else {
		
		sensor = 1
		rad = 8
		
		if(missing(G_rescale) | missing(B_rescale)){
			if(missing(offset) | missing(gain)) {
				stop(Please specify either a) metaData, b) gain and offset, c) B_rescale and G_rescale, call. = FALSE )
			} else {
				B_rescale <- 1/gain
				G_rescale <- -offset/gain
			}
		}
		
		
		if(missing(d)) {
			if(missing(date)) { 
				stop(Please specify either a) edist or b)date, call. = FALSE) 
			} else {
				d <- .ESdist(date) 
			}
		}
	}
	
	if(satellite == LANDSAT8 & method != APREF) {
		warning(DOS, COSTZ and SDOS are currently not implemented for Landsat 8. Using official reflectance calibration coefficients, i.e. output corresponds to method = 'APREF', call. = FALSE) 
		method <- APREF
	}
	
	satZenith	<- satZenith * pi / 180
	satphi 		<- cos(satZenith)
	suntheta 	<- cos((90 - sunElev) * pi / 180)	
	
	
	sDB <- LANDSAT.db[[satellite]][[sensor]]
	
	
	
	sDB 	<- sDB[match(paste0(B, sapply(.getNumeric(names(x)),[,1)), sDB$band),]	
	sDB		<- sDB[match(sDB$band, paste0(B,sapply(.getNumeric(names(x)),[,1))),]
	
	if(any(bandSet == full)) {
		bandSet <- names(x)
	} else {
		if(is.numeric(bandSet)) bandSet <- paste0(B, bandSet)
	}	
	
	if(missing(metaData))	names(B_rescale) <- names(G_rescale) <- bandSet
	
	origBands 	<- names(x)   
	corBands 	<- sDB[!sDB$bandtype %in% c(TIR, PAN), band]
	bandSet 	<- bandSet[bandSet %in% corBands]
	if(thermal){
		tirBands	<- if(satellite==LANDSAT8) c(B10, B11) else c(B6, B6_VCID_1, B6_VCID_2)	
		tirBands 	<- origBands[origBands %in% tirBands]
	} else {
		tirBands <- NULL
	}
	exclBands	<- origBands[!origBands %in% c(bandSet, tirBands)]
	
	if(length(exclBands) > 0) {
		xexc <- x[[exclBands]] 
	} else {
		xexc <- NULL
	}
	
	if(missing(esun)) {
		esun <- sDB[,esun] 
		names(esun) <- sDB$band
	}
	xref <- x[[bandSet]]
	
	if(reflectance) {
		message(Bands to convert to reflectance: , paste(bandSet, collapse = , ))
		if(length(tirBands) > 0 & thermal) message(Thermal bands to convert to brightness temperatures: , paste(tirBands, collapse=, ))
		if(length(exclBands) > 0) message(Excluding bands: , paste(exclBands, collapse = , ))	
	} else {
		bandSet <- c(bandSet, tirBands)
		message(Bands to convert to toa radiance: , paste(bandSet, collapse = , ))
	}
	
	
	if(thermal & reflectance & length(tirBands) > 0) {
		message(Processing thermal band(s))
		
		L <- G_rescale[tirBands] * x[[tirBands]] + B_rescale[tirBands]
		
		xtir <- K2 / log(K1/L + 1) 
		names(xtir) <- tirBands
	} else {
		xtir <- NULL
	}
	
	message(Processing radiance / reflectance)
	
	
	if(method == APREF) {
		TAUz <- 1
		TAUv <- 1
		Edown <- 0
		Lhaze <- 0
		
	} else {
		
		
		if(missing(SHV)){
			if(missing(hazeBand))  hazeBand <- B1
			if(length(hazeBand) > 1) {
				warning(Automatic search for SHV values is intended for one band only. For more bands please estimate hzae DNs manually using estimateSHV() \nhazeBand was automatically reset to 1)
				hazeBand <- 1 }
			message(SHV was not provided -> Estimating SHV automatically)
			dP <- 0.02
			
			SHV <- suppressWarnings(estimateSHV(x, hazeBand = hazeBand, darkProp = dP , plot = FALSE, returnTables = TRUE))
			while(is.na(SHV[[1]])){
				dP	<- dP * 0.9
				SHV <- suppressWarnings(estimateSHV(SHV, hazeBand = hazeBand, darkProp = dP, plot = FALSE, returnTables = TRUE))
			}
			message(paste0(SHV estimated as: , SHV[[1]]))
			SHV <- SHV[[1]]
		}
		
		
		
		if(method == SDOS) hazeBand <- bandSet 
		TAUz <- 1
		TAUv <- 1
		Edown <- 0				
		if (method == COSTZ) {
			TAUz <- suntheta
			TAUv <- satphi
		}  
		
		
		Ldo <- 0.01 * ((esun[hazeBand] * suntheta * TAUz) + Edown) * TAUv / (pi * d ^ 2)
		Lhaze <- (SHV * G_rescale[hazeBand] + B_rescale[hazeBand]) - Ldo
		
		if(method %in% c(DOS, COSTZ)) {		
			
			if(missing(atHaze)) {
				atHaze.db <- data.frame(min = c(1,56,76,96,116), max = c(55,75,95,115,255)) / 255 * (2^rad-1)
				atHaze <- c(veryClear, clear, moderate, hazy, veryHazy)[Lhaze > atHaze.db[,1] & Lhaze <= atHaze.db[,2]]
				message(Selcting atmosphere: ', atHaze, ')
			}		
			Lhaze	  <- Lhaze  * sDB[match(bandSet,sDB$band), paste0(hazeBand,_, atHaze)]
			
			
			NORM  <- G_rescale[bandSet] / G_rescale[hazeBand]
			Lhaze <- Lhaze * NORM + B_rescale[bandSet]	
		}
		
		Lhaze [Lhaze < 0] <- 0
	}
	
	B_rescale	<- B_rescale[bandSet]
	G_rescale 	<- G_rescale[bandSet]
	esun <- esun[bandSet]
	
	if(satellite != LANDSAT8){
		
		if(!reflectance) {
			
			xref <-  ( xref * G_rescale + B_rescale) / suntheta
		} else {
			
			C <- (pi * d ^ 2)/(TAUv * (esun * suntheta * TAUz + Edown))	
			b <- C * (B_rescale - Lhaze)
			a <- C * G_rescale 
			xref <-  a * xref  + b
		}
		
	} else {
		
		if(reflectance) {
			B_rescale 		<- metaData$UNIFIED_METADATA$REF_OFFSET[bandSet]
			G_rescale 		<- metaData$UNIFIED_METADATA$REF_GAIN[bandSet]
		} 
		
		
		xref <-  (G_rescale * xref + B_rescale) / suntheta
		
		
	}
	
	
	x <- stack(xref,xtir, xexc)
	x <- x[[origBands]]
	
	return(x)
}
LANDSAT.db <- list(
		LANDSAT5 = list (
				TM = data.frame(band = paste0(B, 1:7),
						bandtype = c(rep(REF, 5), TIR, REF),
						centerWavl = c(0.485, 0.569, 0.66, 0.840, 1.676, 11.435, 2.223),
						spatRes1 = rep(30, 7),
						spatRes2 = c(rep(30,5), 60, 30), 
						esun = c(1983, 1796, 1536, 1031, 220, NA, 83.44))
		),
		LANDSAT7 = list(
				ETM = data.frame(band = paste0(B,1:8),
						bandtype = c(rep(REF, 5), TIR, REF, PAN),
						spatRes1 = c(rep(30, 7), 15),
						spatRes2 = c(rep(30,5), 60, 30, 15),  
						centerWavl = c(0.485, 0.560, 0.660, 0.835, 1.650,11.335,2.220,0.706),
						esun = c(1997,1812,1533,1039,230.8,NA,84.9,1362)
				)
		),
		LANDSAT8 = list(
				OLI_TIRS = data.frame(band = c(paste0(B,1:11), BQA),
						bandtype = c(rep(REF, 7), PAN, REF, TIR, TIR, QA),
						spatRes1 = c(rep(30, 7), 15, rep(30,4)),
						spatRes2 = c(rep(30, 7), 15, rep(30,4)),  
						centerWavl = c(0.44,0.48,0.56,0.655,0.865,1.61,2.2,0.59,1.37,10.6,11.5, NA), 
						esun = c(NA, 2067, 1893, 1603, 972.6, 245, 79.72, NA, 399.7, NA, NA, NA ) 
				)
		)
) 
exponents <- c(-4, -2, -1, -.7, -.5)
for(s in names(LANDSAT.db)){
	bandType		<- LANDSAT.db[[s]][[1]][,bandtype] == REF
	centerWavl		<- LANDSAT.db[[s]][[1]][bandType, centerWavl] 
	bands 			<- LANDSAT.db[[s]][[1]][bandType, band]
	
	
	TAB1			<- sapply(exponents, function(x) centerWavl ^ x)
	rownames(TAB1)  <- bands
	colnames(TAB1)	<- c(veryClear, clear, moderate, hazy, veryHazy)
	
	
	TAB2 <- lapply(paste0(B, 1:4), function(SHVB){ sweep(TAB1, 2, TAB1[SHVB,], /)})
	TAB2 <- do.call(cbind, TAB2)
	colnames(TAB2) <- paste0(rep(paste0(B, 1:4), each = 5),_, colnames(TAB2))
	
	LANDSAT.db[[s]][[1]] <-  merge(LANDSAT.db[[s]][[1]] , TAB2, by.x = band, by.y = row.names, all.x = TRUE, sort = FALSE)
}
#+END_SRC
* readMeta.R
#+BEGIN_SRC R 
readMeta <- function(file, unifiedMetadata = TRUE){
	if(!grepl(MTL, file) & !grepl(xml, file)) warning(The Landsat metadata file you have specified looks unusual. Typically the filename contains the string 'MTL' or 'xml'. Are you sure you specified the right file? \n I'll try to read it but check the results!)
	
	
	metaDataFormat <- if(grepl(xml, file)) XML else MTL
	
	if(metaDataFormat == MTL) {
		
		
		meta <- read.delim(file, sep = =, head = FALSE, stringsAsFactors = FALSE, strip.white = TRUE, skip = 1, skipNul = TRUE)
		meta <- meta[-(nrow(meta)-c(1,0)),]
		
		
		l <- meta[grep(GROUP,meta[,1]),]
		
		
		meta <- lapply(unique(l[,2]), FUN = function(x){
					w <- which(meta[,2] == x)
					m <- meta[(w[1]+1):(w[2]-1),]
					rownames(m) <- m[,1]
					m <- m[ , 2, drop = FALSE]
					colnames(m) <- VALUE
					return(m)
				})
		
		names(meta) <- unique(l[,2])
		
		
		legacy <- PROCESSING_SOFTWARE %in% rownames(meta$PRODUCT_METADATA)
		if(legacy) message(This scene was processed before August 29, 2012. Using MTL legacy format. Some minor infos such as SCENE_ID will be missing)
		
		if(unifiedMetadata){
			
			meta[[UNIFIED_METADATA]] <- list(
					SPACECRAFT_ID 		= {SAT <- paste0(LANDSAT, .getNumeric(meta$PRODUCT_METADATA[SPACECRAFT_ID,]))},
					SENSOR_ID 			= meta$PRODUCT_METADATA[SENSOR_ID,]	,			
					SCENE_ID 			= meta$METADATA_FILE_INFO[LANDSAT_SCENE_ID,],  
					DATA_TYPE			= if(!legacy) meta$PRODUCT_METADATA[DATA_TYPE,] else meta$PRODUCT_METADATA[PRODUCT_TYPE,],
					ACQUISITION_DATE	= {date <- if(!legacy) meta$PRODUCT_METADATA[DATE_ACQUIRED,] else meta$PRODUCT_METADATA[ACQUISITION_DATE,]},
					PROCESSING_DATE		= if(!legacy) meta$METADATA_FILE_INFO[FILE_DATE,] else meta$METADATA_FILE_INFO[PRODUCT_CREATION_TIME,], 
					PATH				= as.numeric(meta$PRODUCT_METADATA[WRS_PATH,]),
					ROW					= if(!legacy) as.numeric(meta$PRODUCT_METADATA[WRS_ROW,]) else as.numeric(meta$PRODUCT_METADATA[STARTING_ROW,]),
					RADIOMETRIC_RES		= if(SAT == LANDSAT8) 16 else 8,				
					FILES				= {files <- row.names(meta[[PRODUCT_METADATA]])[grep(^.*FILE_NAME, row.names(meta$PRODUCT_METADATA))]
						files <- files[grep(^.*BAND,files)]
						files <- meta[[PRODUCT_METADATA]][files,]	},
					
					BANDS 				= {junk <- unique(sapply(str_split(files, _B), [ ,1 ))
						bds <- str_replace(str_replace(files, paste0(junk,_), ), {if(SAT==LANDSAT5) 0.TIF else .TIF}, )
					},
					BAND_TYPE 			= {
						ty <- rep(image, length(bds))
						ty[grepl(QA, bds)] <- qa
						ty
					},
					
					NA_VALUE 			= rep(0, length(ty)),
					SUN_AZIMUTH			= if(!legacy) as.numeric(meta$IMAGE_ATTRIBUTES[SUN_AZIMUTH,]) else as.numeric(meta$PRODUCT_PARAMETERS[SUN_AZIMUTH,]),
					SUN_ELEVATION		= if(!legacy) as.numeric(meta$IMAGE_ATTRIBUTES[SUN_ELEVATION,]) else as.numeric(meta$PRODUCT_PARAMETERS[SUN_ELEVATION,]),
					EARTH_SUN_DISTANCE  = {es <- meta$IMAGE_ATTRIBUTES[EARTH_SUN_DISTANCE,]
						if(is.null(es) || is.na(es)) es <- .ESdist(date)
						as.numeric(es)}
			)
			
			
			RADCOR <-  if(!legacy) { list(		
								RAD_OFFSET				= {
									r <- meta$RADIOMETRIC_RESCALING
									r[,1]		<- as.numeric(r[,1])
									bandnames	<- str_c(B, str_replace(rownames(r), ^.*_BAND_, ))
									go			<- grep(RADIANCE_ADD*, rownames(r))
									ro 			<- r[go,]
									names(ro)	<- bandnames[go]
									ro},
								RAD_GAIN				= {go			<- grep(RADIANCE_MULT*, rownames(r))
									ro 			<- r[go,]
									names(ro)	<- bandnames[go]
									ro},
								REF_OFFSET				= {	go			<- grep(REFLECTANCE_ADD*, rownames(r))
									ro 			<- r[go,]
									names(ro)	<- bandnames[go]
									ro},
								REF_GAIN				= {go			<- grep(REFLECTANCE_MULT*, rownames(r))
									ro 			<- r[go,]
									names(ro)	<- bandnames[go]
									ro})
										
					} else {
						
						bandnames <- paste0(B, .getNumeric(rownames(meta$MIN_MAX_RADIANCE)))
						bandnames <- bandnames[seq(1, length(bandnames), 2)]
						
						L <- diff(as.numeric(meta$MIN_MAX_RADIANCE[,1]))
						L <- L[seq(1, length(L), 2)] 
						
						Q <- diff(as.numeric(meta$MIN_MAX_PIXEL_VALUE[,1]))  
						Q <- Q[seq(1, length(Q), 2)]
						
						RAD_GAIN	<- L/Q
						RAD_OFFSET 	<- as.numeric(meta$MIN_MAX_RADIANCE[,1])[seq(2,nrow(meta$MIN_MAX_RADIANCE),2)] - (RAD_GAIN) * 1
						
						names(RAD_OFFSET) <- names(RAD_GAIN) <- bandnames
												
						list(RAD_OFFSET = RAD_OFFSET, RAD_GAIN = RAD_GAIN)
						
					}
			
	 if(SAT == LANDSAT8){
				RADCOR$K1 ={ r <- meta$TIRS_THERMAL_CONSTANTS
					r[,1]		<- as.numeric(r[,1])
					bandnames	<- str_c(B, str_replace(rownames(r), ^.*_BAND_, ))
					go			<- grep(K1, rownames(r))
					ro 			<- r[go,]
					names(ro)	<- bandnames[go]
					ro}
				RADCOR$K2 = {go			<- grep(K2, rownames(r))
					ro 			<- r[go,]
					names(ro)	<- bandnames[go]
					ro}				
			} else {
				TAB7 <- list(LANDSAT4 = c(B6=671.62,B6=1284.3), 
						LANDSAT5 = c(B6=607.76,B6=1260.56),
						LANDSAT7 = c(B6=666.09,B6=1282.71))
					
				RADCOR$K1 <- TAB7[[SAT]][1]
				RADCOR$K2 <- TAB7[[SAT]][2]
			}
			
			meta[[UNIFIED_METADATA]] <- c(meta[[UNIFIED_METADATA]], RADCOR)
		}
	} else {
		
		meta <- xmlParse(file)
		meta <- xmlToList(meta)
		names(meta$bands) <- str_replace_all(unlist(sapply(meta$bands, [, long_name)),  , _)
		
		if(unifiedMetadata){
			
			atts <- sapply(meta$bands, [, .attrs)
			
			meta[[UNIFIED_METADATA]] <- list(
					SPACECRAFT_ID 		= {SAT <- paste0(LANDSAT, .getNumeric(meta$global_metadata$satellite))},
					SENSOR_ID 			= meta$global_metadata$instrument,			
					SCENE_ID 			= SID <- str_replace(meta$global_metadata$lpgs_metadata_file, _MTL.txt, ),  
					DATA_TYPE			= if(meta$bands[[1]]$.attrs[product] == sr_refl) SR, 
					ACQUISITION_DATE	= {date <- meta$global_metadata$acquisition_date},
					PROCESSING_DATE		= meta$bands[[1]]$production_date, 
					PATH				= as.numeric(meta$global_metadata$wrs[path]),
					ROW					= as.numeric(meta$global_metadata$wrs[row]),
					
					FILES				= {files <- sapply(meta$bands, [[, file_name)
						names(files) <- NULL
						files},					
					BANDS 				= {	
						bds <- grepl(_band, files)
						toa <- grepl(_toa_, files)
						qas <- grepl(qa, files)	
						bnames				<- toupper(str_replace(files, paste0(SID, _), ))					
						bnames[bds]			<- paste0(B, .getNumeric(bnames[bds]))
						bnames[bds & qas] 	<- paste0(bnames[bds & qas], _QA)
						bnames				<- str_replace(str_replace(str_replace(bnames, \\.TIF, ), SR_, ), TOA_, )
						bnames[toa] 		<- paste0(bnames[toa], _TOA)
						bnames
					},
					BAND_TYPE			= {ty <- sapply(atts, [ , category)
						names(ty) <- NULL
						ty
					},
					NA_VALUE 			= as.numeric(sapply(atts, [ , fill_value)),
					SATURATE_VALUE 		= as.numeric(sapply(atts, [ , saturate_value)),
					SCALE_FACTOR 		= as.numeric(sapply(atts, [ , scale_factor)),
					
					SUN_AZIMUTH			= as.numeric(meta$global_metadata$solar_angles[azimuth]),
					SUN_ELEVATION		= 90 - as.numeric(meta$global_metadata$solar_angles[zenith]),
					EARTH_SUN_DISTANCE  = {.ESdist(date)}
			)
			
		}
		
	}
	return(meta)
}
stackMeta <- function(file, allResolutions = FALSE,  resampleTIR = FALSE, resamplingMethod = ngb, products = c(image, index, qa)){
	
	
	meta  <- readMeta(file)
	files <- meta$UNIFIED_METADATA$FILES
	
	
	path  <- if(basename(file) != file)  str_replace(file, basename(file), ) else NULL
	
	
	rl <- lapply(paste0(path, files), raster)
	resL <- lapply(lapply(rl, res),[, 1)
	
	if(any(resL > 30)) {
		message(Your Landsat data includes TIR band(s) which were not resampled to 30m.
						\nYou can set resampleTIR = TRUE to resample TIR bands to 30m if you want a single stack)
		
		
		if(resampleTIR){
			for(i in which(resL > 30))
				rl[[i]] <- resample(rl[[i]], rl[[which(resL == 30)[1]]], method = resamplingMethod)		
		}
	}
	
	
	returnRes <- if(allResolutions) unlist(unique(resL)) else 30
	
	LS 	<- lapply(returnRes, function(x){
				s			<- stack(rl[resL == x])
				names(s) 	<- meta$UNIFIED_METADATA$BANDS[resL == x]
				NAvalue(s)	<- meta$UNIFIED_METADATA$NA_VALUE[resL == x]	
				s <- s[[ which(names(s) %in% meta$UNIFIED_METADATA$BANDS[meta$UNIFIED_METADATA$BAND_TYPE %in% products])	]]
				s
			})
	
	if(!allResolutions) LS <- LS[[1]]
	
	return(LS)
}
#+END_SRC
* RStoolbox.R
#+BEGIN_SRC R 
NULL
#+END_SRC
* spectralIndices.R
#+BEGIN_SRC R 
spectralIndices <- function(inputRaster, indices = NDVI, sensor, bands , maskRaster = NULL, verbose = FALSE, ... ) {
	
	
	
	
	
	
	
	
	SENSORS <- list(
			LANDSAT5 = list(BLUE = B1, GREEN = B2, RED = B3, NIR = B4, MIR = B7),
			LANDSAT7 = list(BLUE = B1, GREEN = B2, RED = B3, NIR = B4),
			LANDSAT8 = list(BLUE = B2, GREEN = B3, RED = B4, NIR = B5)
	)
	
	if(!missing(sensor)){
		if(!sensor %in% names(SENSORS)) stop(paste0(Unknown sensor. Please provide the 'bands' argument or 'sensor' as one of , names(SENSORS)))
		bands <- SENSORS[[sensor]]
		if(any(!bands %in% names(inputRaster))) stop(Bandnames of inputRaster do not match the required format or are missing. Please provide 'bands' argument manually or make sure the names(inputRaster) follow the 'B1' 'B2'  ... format if you want to make use of the 'sensor' argument.)
	}
	bands <- lapply(bands, function(x) if(is.character(x)) which(names(inputRaster) == x) else x )
	
	
	INDICES <-  list(
			SR 		= function(NIR, RED) {NIR / RED},
			DVI		= function(NIR, RED) {NIR-RED},
			NDVI	= function(NIR, RED) {(NIR-RED)/(NIR+RED)}, 
			TVI 	= function(NIR, RED) {(((NIR-RED)/(NIR+RED))+0.5)^0.5}, 
			MSAVI	= function(NIR, RED) {NIR + 0.5 - (0.5 * sqrt((2 * NIR + 1)^2 - 8 * (NIR - (2 * RED))))},
			MSAVI2	= function(NIR, RED) {(2 * (NIR + 1) - sqrt((2 * NIR + 1)^2 - 8 * (NIR - RED))) / 2},
			GEMI	= function(NIR, RED) {(((NIR^2 - RED^2) * 2 + (NIR * 1.5) + (RED * 0.5) ) / (NIR + RED + 0.5)) * (1 - ((((NIR^2 - RED^2) * 2 + (NIR * 1.5) + (RED * 0.5) ) / (NIR + RED + 0.5)) * 0.25)) - ((RED - 0.125) / (1 - RED))},                   
			SLAVI	= function(RED, MIR) {NIR / (RED + MIR)},
			EVI		= function(NIR, RED, BLUE) {G * ((NIR - RED) / (NIR + C1 * RED - C2 * BLUE + L))}
	)
	
	
	args <- lapply(indices, function(index) {
				need <- names(formals(INDICES[[index]]))	
				if(any(!need %in% names(bands))) stop(Band specification(s) of >> , paste(names(bands)[!names(bands) %in% need], collapse = ,), 
							 << are missing or do not match layer names in the brick/stack. \nPlease specify the correct layer number or name in a list, e.g. bands = list(RED = 'B4', NIR = 'B5'), call. = FALSE)
				need <- unlist(bands[need])
			})
	names(args) <- indices 
	
	
	inList <- lapply(indices, function(index) {
				if(verbose) print(paste0(Calculating , index))
			m<-	overlay(inputRaster[[args[[index]]]], fun = INDICES[[index]])
			})
	
	
	outStack <- stack(inList)
		
	
	
	
	if(any(grepl(file, names(list(...))))) outStack <-  writeRaster(outStack, ...)
	
	names(outStack) <- indices	 
	return(outStack)
}
#+END_SRC
* superClass.R
#+BEGIN_SRC R 
superClass <- function(inputRaster, trainingData, classAttributes = NULL, nSamples = 100, filename = NULL, maskRaster = NULL, verbose = FALSE, predict = TRUE, overwrite = TRUE, ...) {
	
	
	
	
	
	
	
	
	
	if(!inherits(inputRaster, Raster)) stop(inputRaster must be a raster object (RasterLayer,RasterBrick or RasterStack), call.=FALSE)
	if(!inherits(trainingData, SpatialPolygonsDataFrame)) stop(traingData must be a SpatialPolygonsDataFrame, call.=FALSE)
	
	
	if(is.null(classAttributes)){
		if(ncol(trainingData) == 1) {
			classAttributes <- 1
			message(You did not specify the classAttributes column. \nSince your trainingData only contains one column we assume this is it)
		} else {
			stop(paste(Dont't know which column in trainingData contains the class attribute. \nPlease specify classAttributes as one of: , paste(colnames(trainingData@data),collapse=, )), call. = FALSE)
		}
	} 
	if(!classAttributes %in% colnames(trainingData@data)) 
		stop(paste0(The column , classAttributes,  does not exist in trainingData. \nAvailable columns are: , colnames(trainingData@data,collapse=, )), call. = FALSE) 
		
	
	if(!compareCRS(inputRaster, trainingData)) 
		stop(Projection of trainingData does not match inputRaster)
		
	
	
	if(!gIntersects(as(extent(inputRaster),SpatialPolygons), as(extent(trainingData),SpatialPolygons))) 
		stop(inputRaster and trainingData do not overlap)
	
	
	
	if(is.projected(trainingData)){
		trainingData[[area]] <- gArea(trainingData, byid = TRUE)
	} else {
		trainingData[[area]] <- areaPolygon(trainingData)		
	}
	
	
	trainingData@data[[order]] <- 1:nrow(trainingData) 		
	weights <- ddply(trainingData@data, .variables = classAttributes, .fun = here(mutate), nSamplesClass = ceiling(nSamples * area / sum(area)))
	trainingData@data <- weights[order(weights$order),]
		
	
	xy  <- lapply(seq_along(trainingData), function(i_poly){	
				pts <- spsample(trainingData[i_poly, ], type = random, n = trainingData@data[i_poly,nSamplesClass], iter = 20) 
			})
	xy <- do.call(rbind, xy)
	
	
	if(verbose) {
		plot(inputRaster,1)
		plot(trainingData, add = T)
		points(xy, pch = 3, cex = 0.5)
	}	
	
	
	if(verbose) print(Begin extract)
	dataSet <- data.frame(
			response = as.factor(over(x = xy, y = trainingData)[[classAttributes]]),
			extract(inputRaster, xy, cellnumbers = TRUE))
	
	
	dataSet <- dataSet[!duplicated(dataSet[,cells]),]
	dataSet <- dataSet[,colnames(dataSet) != cells]
	
	
	classes <- unique(trainingData[[classAttributes]])
	classMapping <- data.frame(classID = as.numeric(classes), class = levels(classes))
	
	
	if(verbose) print(Starting to calculate random forest model) 
	model <- randomForest(response ~ . , data = dataSet, na.action = na.omit, confusion = TRUE, ...)		
	
	
	progress <- none
	if(verbose) { print(Starting spatial predict)
		progress <- text
	}
	 
	
	ifelse(length(classes) < 255, dataType <- INT1U,  dataType <- INT2U)
	
	if(is.null(filename)){
		spatPred <- predict(inputRaster, model, progress = progress, dataType = dataType, overwrite = overwrite)
	} else {
		spatPred <- predict(inputRaster, model, filename = filename, progress = progress, dataType = dataType, overwrite = overwrite)
	}
	 
	
	if(verbose)
		print(paste0(paste0(rep(*,20), collapse = ), Classification summary  ,paste0(rep(*,20), collapse = )))
		
		
		print(model)
	
	
	
	return(list(model = model, map = spatPred, classMapping = classMapping)) 
	
}
#+END_SRC
