+ Package: wrspathrow
+ Version: 0.2
+ Date: 2014-04-23
+ Title: Functions for working with Worldwide Reference System (WRS)
+ Authors@R: c(person("Alex", "Zvoleff", email="azvoleff@conservation.org",
+     role=c("aut", "cre")))
+ Maintainer: Alex Zvoleff <azvoleff@conservation.org>
+ Depends:
+     R (>= 2.10.0),
+     methods
+ Imports:
+     wrspathrowData,
+     sp,
+     raster,
+     rgeos,
+     rgdal
+ Description: Contains functions for working with the Worldwide Reference System
+     (WRS) 1 and 2 systems used by NASA. WRS-1 applies to Landsat 1-3, WRS-2
+     applies to Landsat 4-8. The package has functions for retrieving a given
+     path and row as a polygon, and for retrieving the path(s) and row(s)
+     containing a given raster or vector.
+ License: GPL (>= 3)
+ URL: https://github.com/azvoleff/wrspathrow
+ BugReports: https://github.com/azvoleff/wrspathrow
+ LazyData: true
* pathrow_num.R
#+BEGIN_SRC R 
load_wrs_data <- function(wrs_type, wrs_mode) {
    if (wrs_type == 2) {
        wrs_polys <- wrs2_asc_desc
    } else if (wrs_type == 1) {
        wrs_polys <- wrs1_asc_desc
    } else {
        stop(wrs_type must be 1 or 2)
    }
    if (!(wrs_mode %in% c(D, A))) {
        stop(wrs_mode must be "D", "A" or c("D", "A"))
    }
    return(wrs_polys[wrs_polys@data$MODE %in% wrs_mode, ])
}
intersect_wrs_polys <- function(wrs_polys, x, as_polys) {
    intersecting <- as.logical(gIntersects(wrs_polys, gUnaryUnion(x), byid=TRUE))
    if (sum(intersecting) == 0) {
        stop(no intersecting pathrows found)
    } else {
        wrs_polys <- wrs_polys[intersecting, ]
        wrs_polys <- wrs_polys[order(wrs_polys$PATH, wrs_polys$ROW), ]
        if (!as_polys) {
            wrs_polys <- data.frame(PATH=wrs_polys@data$PATH, ROW=wrs_polys@data$ROW)
        }
        return(wrs_polys)
    }
}
setGeneric(pathrow_num, function(x, wrs_type=2, wrs_mode=D, 
                                   as_polys=FALSE) {
    standardGeneric(pathrow_num)
})
setMethod(pathrow_num, signature(x=Raster),
    function(x, wrs_type, wrs_mode, as_polys) {
        wrs_polys <- load_wrs_data(wrs_type, wrs_mode)
        x_wgs84 <- projectExtent(x, crs=crs(wrs_polys))
        x_wgs84_sp <- as(extent(x_wgs84), SpatialPolygons)
        return(intersect_wrs_polys(wrs_polys, x_wgs84_sp, as_polys))
    }
)
setMethod(pathrow_num, signature(x=Spatial),
    function(x, wrs_type, wrs_mode, as_polys) {
        wrs_polys <- load_wrs_data(wrs_type, wrs_mode)
        x_wgs84 <- spTransform(x, CRS(proj4string(wrs_polys)))
        return(intersect_wrs_polys(wrs_polys, x_wgs84, as_polys))
    }
)
#+END_SRC
* pathrow_poly.R
#+BEGIN_SRC R 
pathrow_poly <- function(wrs_path, wrs_row, wrs_type=2, wrs_mode=D) {
    if (wrs_type == 2) {
        if (wrs_path < 1 || wrs_path > 233) {
            stop(WRS-2 paths range from 1 to 233)
        }
        if (wrs_row < 1 || wrs_row > 248) {
            stop(WRS-2 rows range from 1 to 248)
        }
    } else if (wrs_type == 1) {
        if (wrs_path < 1 || wrs_path > 251) {
            stop(WRS-1 paths range from 1 to 251)
        }
        if (wrs_row < 1 || wrs_row > 248) {
            stop(WRS-1 rows range from 1 to 248)
        }
    }
    wrs_polys <- load_wrs_data(wrs_type, wrs_mode)
    return(wrs_polys[wrs_polys@data$PATH == wrs_path &
                     wrs_polys@data$ROW == wrs_row, ])
}
#+END_SRC
* wrspathrow-package.R
#+BEGIN_SRC R 
NULL
.onLoad <- function(libname, pkgname) {
    load(system.file(data, wrs1_asc_desc.RData, package=wrspathrowData), 
         envir=parent.env(environment()))
    load(system.file(data, wrs2_asc_desc.RData, package=wrspathrowData),
         envir=parent.env(environment()))
}
#+END_SRC
