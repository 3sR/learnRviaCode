* BSL.R
#+BEGIN_SRC R 
BSL <-
function(band3, band4, method = quantile, ulimit = .99, llimit = .005)
{
    
    if(is.character(band3)) {
        band3 <- read.asciigrid(band3)
        band3 <- band3@data[,1]
    } else {
        if(class(band3) == SpatialGridDataFrame) {
            band3 <- band3@data[,1]
        } else {
            band3 <- as.vector(as.matrix(band3))
        }
    } 
    
    if(is.character(band4)) {
        band4 <- read.asciigrid(band4)
        band4 <- band4@data[,1]
    } else {
        if(class(band4) == SpatialGridDataFrame) {
            band4 <- band4@data[,1]
        } else {
            band4 <- as.vector(as.matrix(band4))
        }
    } 
    
    bsl.joint <- cbind(band3, band4)
    bsl.joint <- bsl.joint[apply(bsl.joint, 1, function(x)!any(is.na(x))), ]
    bsl.joint <- bsl.joint[apply(bsl.joint, 1, function(x)all(x < 255)), ]
    ratio43 <- bsl.joint[,2]/bsl.joint[,1]
    if(method == quantile) {
        bsl.lmodel2 <- lmodel2(bsl.joint[ratio43 < quantile(ratio43, llimit), 2] ~ bsl.joint[ratio43 < quantile(ratio43, llimit), 1])
    }
    else if(method == minimum) {
        
        bsl.min <- factor(bsl.joint[,1], levels=1:254)
        bsl.min <- split(bsl.joint[,2], bsl.min, drop=TRUE)
        bsl.min <- lapply(bsl.min, min)
        bsl.lmodel2 <- lmodel2(as.numeric(bsl.min) ~ as.numeric(names(bsl.min)))
    }
    else {
        stop(Method not found.\n)
    }
    bsl.lm <- unlist(bsl.lmodel2$regression.results[2, 2:3])
    names(bsl.lm) <- c(Intercept, Slope)
    
    bsl.test <- bsl.joint
    bsl.test[,2] <- 255 - bsl.test[,2] 
    bsl.test <- apply(bsl.test, 1, sum)
    
    bsl.top <- bsl.joint[ratio43 > quantile(ratio43, ulimit, na.rm=TRUE), ]
    bsl.test <- bsl.test[ratio43 > quantile(ratio43, ulimit, na.rm=TRUE)]
    bsl.top <- bsl.top[bsl.test == min(bsl.test), ]
    if(!is.null(dim(bsl.top))) bsl.top <- bsl.top[sample(1:nrow(bsl.top), 1),]
    list(BSL=bsl.lm, top=bsl.top)
}
#+END_SRC
* clouds.R
#+BEGIN_SRC R 
clouds <- function(band1, band6, level = 0.0014, buffer=5) {
    
    
    
   
    
    
    
    if(is.character(band1)) {
        band1 <- read.asciigrid(band1)
        results <- band1
        dims <- band1@grid@cells.dim
        band1 <- band1@data[,1]
    } else {
        if(class(band1) == SpatialGridDataFrame) {
            results <- band1
            dims <- band1@grid@cells.dim
            band1 <- band1@data[,1]
        } else {
            results <- band1
            dims <- dim(as.matrix(band1))
            band1 <- as.vector(as.matrix(band1))
        }
    } 
    
    if(is.character(band6)) {
        band6 <- read.asciigrid(band6)
        band6 <- band6@data[,1]
    } else {
        if(class(band6) == SpatialGridDataFrame) {
            band6 <- band6@data[,1]
        } else {
            band6 <- as.vector(as.matrix(band6))
        }
    } 
           
    cloudmask <- ifelse(band1/band6 > level, 1, 0) 
    
    cloudmask <- movingwindow(matrix(cloudmask,  nrow=dims[1], ncol=dims[2]), matrix(rep(1, buffer*buffer), buffer, buffer))
    cloudmask <- ifelse(as.vector(cloudmask) > 0, 1, NA)
    
    if(class(results) == SpatialGridDataFrame)
        results@data[,1] <- cloudmask
    else if(is.data.frame(results))
        results <- data.frame(matrix(cloudmask, nrow=nrow(results), ncol=ncol(results)))
    else if(is.matrix(results))
        results <- matrix(cloudmask, nrow=nrow(results), ncol=ncol(results))
    else 
        results <- cloudmask
    
    results
}
#+END_SRC
* ddate.R
#+BEGIN_SRC R 
ddate <-
function(year, month, day)
{
    
    if(length(year) > 1) {
	month <- year[2]
	day <- year[3]
	year <- year[1]
    }
    year + julian(as.Date(paste(year, month, day, sep=-)), origin=as.Date(paste(year-1, 12, 31, sep=-)))[[1]]/365
    
}
#+END_SRC
* DOS.R
#+BEGIN_SRC R 
DOS <-
function(sat=5, scattering.coef=c(-4, -2, -1, -.7, -.5), SHV, SHV.band, gain, offset, Grescale, Brescale, sunelev, edist, Esun=c(198.3, 179.6, 153.6, 103.1, 22, 8.34), blackadjust = 0.01)
{
    if(sat == 5)
        bands <- data.frame(
            lmin=c(0.45, 0.52, 0.63, 0.76, 1.55, 2.08),
            lmax=c(0.52, 0.60, 0.69, 0.90, 1.75, 2.35))
    else if(sat == 7)
        bands <- data.frame(
            lmin=c(0.45, 0.52, 0.63, 0.77, 1.55, 2.09),
            lmax=c(0.52, 0.60, 0.69, 0.90, 1.75, 2.35))
    else stop(Unknown satellite.\n)
    rownames(bands) <- c(band1, band2, band3, band4, band5, band7)
    
    
    scattering.mean <- matrix(apply(bands, 1, mean), byrow=FALSE, nrow=nrow(bands), ncol=length(scattering.coef))
    rownames(scattering.mean) <- rownames(bands)
    colnames(scattering.mean) <- paste(coef, scattering.coef, sep=)
    scattering.mean <- sweep(scattering.mean, 2, scattering.coef, ^)
    scattering.mean.pct <- sweep(scattering.mean, 2, apply(scattering.mean, 2, sum), /)
    
    scattering.approx <- matrix(NA, nrow=nrow(bands), ncol=length(scattering.coef))
    rownames(scattering.approx) <- rownames(bands)
    colnames(scattering.approx) <- paste(coef, scattering.coef, sep=)
    grain <- 0.0001
    for(i in 1:nrow(bands)) {
        thisband <- seq(bands[i, 1], bands[i, 2], by=grain)
        for(j in 1:length(scattering.coef)) {
            scattering.approx[i, j] <- mean(thisband ^ scattering.coef[j])
        }
    }
    scattering.approx.pct <- sweep(scattering.approx, 2, apply(scattering.approx, 2, sum), /)
    
    
    
    corrband.mean <- scattering.mean[SHV.band, ]
    corrband.mean <- sweep(scattering.mean, 2, corrband.mean, /)
    corrband.approx <- scattering.approx[SHV.band, ]
    corrband.approx <- sweep(scattering.approx, 2, corrband.approx, /)
    
    
    
    
    
    
    if(missing(offset)) {
        offset <- -1 * Brescale / Grescale
        gain <- 1/Grescale
    }
    NORM <- gain / gain[SHV.band]
    
    suntheta <- (90-sunelev) * pi / 180
    suntheta <- cos(suntheta)
    
    Eo <- Esun[SHV.band]/edist^2
        
    
    SHV <- SHV - gain[SHV.band] * blackadjust * Eo * suntheta / pi
    
    SHV <- SHV - offset[SHV.band]
    DNfinal.mean <- SHV * corrband.mean 
    DNfinal.mean <- sweep(DNfinal.mean, 1, NORM, *)
    DNfinal.mean <- sweep(DNfinal.mean, 1, offset, +)
    DNfinal.approx <- SHV * corrband.approx 
    DNfinal.approx <- sweep(DNfinal.approx, 1, NORM, *)
    DNfinal.approx <- sweep(DNfinal.approx, 1, offset, +)
    list(DNfinal.mean = DNfinal.mean, DNfinal.approx = DNfinal.approx)
}
#+END_SRC
* ESdist.R
#+BEGIN_SRC R 
ESdist <-
function(adate)
{
    
    
    
    edist <- julian(as.Date(adate), origin=as.Date(paste(substring(adate, 1, 4), 12, 31, sep=-)))[[1]]
    edist <- 1 - 0.016729 * cos((2*pi) * (0.9856 * (edist - 4)/360))
    
    edist
}
#+END_SRC
* georef.R
#+BEGIN_SRC R 
georef <-
function(target, tofix, maxdist = 1000, startx = 0, starty = 0)
{
    
    
    
    
    target <- as.matrix(target)
    tofix <- as.matrix(tofix)
    
    
    if( startx != 0 | starty != 0) {
	padx <- pady <- max(abs(startx), abs(starty))
	target <- geoshift(target, padx, pady, 0, 0)
	tofix <- geoshift(tofix, padx, pady, startx, starty)
    }
    if(!all(dim(target) == dim(tofix))) stop(target and tofix must be the same size.\n)
    
    thisx <- thisy <- 0
    currrmse <- sqrt(sum((as.vector(target) - as.vector(tofix))^2, na.rm=TRUE) / (sum(!is.na(as.vector(target)) & !is.na(as.vector(tofix)))))
    prevrmse <- currrmse + 1
    maxx <- maxy <- 1
    newx <- newy <- 0
    initrmse <- currrmse
    while(currrmse < prevrmse) {
        results <- matrix(NA, nrow=9, ncol=3)
        colnames(results) <- c(x, y, RMSE)
        target2 <- geoshift(target, maxx, maxy, 0,  0)
        target2 <- as.vector(target2)
        currrow <- 1
        for(x in seq(newx-1, newx+1, by=1)) {
            for(y in seq(newy-1, newy+1, by=1)) {
                tofix2 <- geoshift(tofix, maxx, maxy, x, y)
                tofix2 <- as.vector(tofix2)
                results[currrow, 1:2] <- c(x, y)
                results[currrow, 3] <- sqrt(sum((target2 - tofix2)^2, na.rm=TRUE) / (sum(!is.na(target2) & !is.na(tofix2))))
                currrow <- currrow + 1
            }
        }
        prevrmse <- currrmse
        currrmse <- min(results[, RMSE])
        newx <- results[results[,RMSE] == currrmse, x]
        newy <- results[results[,RMSE] == currrmse, y]
        maxx <- max(abs(newx-1), abs(newx+1))
        maxy <- max(abs(newy-1), abs(newy+1))
	
	
	if(abs(newx) > maxdist | abs(newy) > maxdist) currrmse <- 9999
    
    }
    list(shiftx=newx, shifty=newy, initrmse=initrmse, currrmse=currrmse)
}
#+END_SRC
* geoshift.R
#+BEGIN_SRC R 
geoshift <-
function(mat, padx, pady, shiftx, shifty, nodata=NA)
{
    results <- mat
    if(is.data.frame(mat)) mat <- as.matrix(mat)
    if(is.matrix(mat)) {
        
        newmat <- matrix(nodata, nrow=(nrow(mat) + 2 * padx), ncol=(ncol(mat) + 2 * pady))
        newmat[(shiftx + padx + 1):(nrow(mat) + shiftx + padx), (shifty + pady + 1):(ncol(mat) + shifty + pady)] <- mat
    }
    if(class(mat) == SpatialGridDataFrame) {
        mat.data <- as.matrix(mat)
        mat.data <- geoshift(mat.data, padx, pady, shiftx, shifty, nodata=nodata)
        mat@data <- data.frame(as.vector(mat.data))
        
        mat.grid <- mat@grid
        mat.grid@cellcentre.offset[1] <- mat.grid@cellcentre.offset[1] - (padx * mat.grid@cellsize[1])
        mat.grid@cellcentre.offset[2] <- mat.grid@cellcentre.offset[2] - (pady * mat.grid@cellsize[2])
        mat.grid@cells.dim[1] <- as.integer(mat.grid@cells.dim[1] + 2*padx)
        mat.grid@cells.dim[2] <- as.integer(mat.grid@cells.dim[2] + 2*pady)
        mat@grid <- mat.grid
         
        
        mat.bbox <- bbox(mat)
        mat.bbox[1, min] <- mat.bbox[1, min] - (padx * mat.grid@cellsize[1])
        mat.bbox[1, max] <- mat.bbox[1, max] + (padx * mat.grid@cellsize[1])
        mat.bbox[2, min] <- mat.bbox[2, min] - (pady * mat.grid@cellsize[2])
        mat.bbox[2, max] <- mat.bbox[2, max] + (pady * mat.grid@cellsize[2])
        mat@bbox <- mat.bbox
    }
    
    
    if(class(results) == SpatialGridDataFrame)
        results <- mat
    else if(is.data.frame(results))
        results <- data.frame(newmat)
    else if(is.matrix(results))
        results <- newmat
    else 
        results <- NA
    
    results
}
#+END_SRC
* histmatch.R
#+BEGIN_SRC R 
histmatch <-
function(master, tofix, mask, minval=0, maxval=255, by=1)
{
	
    
	results <- tofix 
	master <- as.vector(as.matrix(master))
	tofix <- as.vector(as.matrix(tofix))
    if(missing(mask)) mask <- rep(NA, length(master))
    else mask <- as.vector(as.matrix(mask))
    results.final <- rep(NA, length(mask))
    master <- master[is.na(mask)]
    tofix <- tofix[is.na(mask)]
	breaks <- seq(minval, maxval, by=by)
	master.cdf <- hist(master, breaks=breaks, plot=FALSE) 
	master.cdf <- c(0, cumsum(master.cdf$counts/sum(master.cdf$counts)))
	tofix.cdf <- hist(tofix, breaks=breaks, plot=FALSE) 
	tofix.cdf <- c(0, cumsum(tofix.cdf$counts/sum(tofix.cdf$counts)))
    
    
	results.recode <- breaks
    results.values <- rep(NA, length(tofix))
    
    
    
    
    
    
    for (i in 2:length(breaks)) {
        testvals <- breaks[master.cdf < tofix.cdf[i]]
        if (length(testvals) > 0) 
            results.recode[i] <- max(testvals)
        results.values[tofix > breaks[i-1] & tofix <= breaks[i]] <- results.recode[i]
    }
    results.final[is.na(mask)] <- results.values
    if(class(results) == SpatialGridDataFrame)
        results@data[,1] <- results.final
    else if(is.data.frame(results))
        results <- data.frame(matrix(results.final, nrow=nrow(results), ncol=ncol(results)))
    else if(is.matrix(results))
        results <- matrix(results.final, nrow=nrow(results), ncol=ncol(results))
    else
        results <- results.final
    list(recode=results.recode, newimage=results)
}
#+END_SRC
* lssub.R
#+BEGIN_SRC R 
lssub <-
function(filename, outname, centerx, centery, centerepsg, widthx, widthy)
{
    
    
    lsinfo <- system(paste(gdalinfo , filename, sep=), intern=TRUE)
    lsorigin <- lsinfo[23]
    lsorigin <- strsplit(lsorigin,  )[[1]][3]
    lsorigin <- gsub(\\(, , lsorigin)
    lsorigin <- gsub(\\), , lsorigin)
    lsorigin <- as.numeric(strsplit(lsorigin, ,)[[1]])
    lspixelsize <- lsinfo[24]
    lspixelsize <- strsplit(lspixelsize,  )[[1]][4]
    lspixelsize <- gsub(\\(, , lspixelsize)
    lspixelsize <- gsub(\\), , lspixelsize)
    lspixelsize <- as.numeric(strsplit(lspixelsize, ,)[[1]])
    lspixelsize <- abs(lspixelsize)
    lsepsg <- lsinfo[22]
    lsepsg <- strsplit(lsepsg, ")[[1]][4]
    
    if(!missing(centerepsg)) {
        if(centerepsg != lsepsg) {
            cat(reprojecting...\n)
            newcenter <- system(paste(echo , centerx,  , centery,  | gdaltransform -s_srs EPSG:, centerepsg,  -t_srs EPSG:, lsepsg, 
                sep=), intern=TRUE)
            newcenter <- as.numeric(strsplit(newcenter,  )[[1]][1:2])
            centerx <- newcenter[1]
            centery <- newcenter[2]
        }
    }
    
    shiftval <- centerx - lsorigin[1]
    shiftval <- ((shiftval / lspixelsize[1]) - floor(shiftval / lspixelsize[1])) * lspixelsize[1]
    if(shiftval != 0) {
        
        centerx <- centerx - shiftval
    }
    shiftval <- centery - lsorigin[2]
    shiftval <- ((shiftval / lspixelsize[2]) - floor(shiftval / lspixelsize[2])) * lspixelsize[2]
    if(shiftval != 0) {
        
        centery <- centery - shiftval
    }
    system(paste(gdal_translate -projwin , centerx - (lspixelsize[1]*widthx),  , centery + (lspixelsize[2]*widthy),  , centerx + (lspixelsize[1]*widthx),  , centery - (lspixelsize[2]*widthy),  , filename,  , outname, sep=), intern=TRUE)
    invisible()
}
#+END_SRC
* minnaert.R
#+BEGIN_SRC R 
minnaert <- function(x, slope, aspect, sunelev, sunazimuth, na.value=NA, GRASS.aspect=FALSE, IL.epsilon=0.000001, slopeclass = c(1, 5, 10, 15, 20, 25, 30, 45), coverclass)
{
    if(GRASS.aspect) {
        aspect <- as.matrix(aspect)
        aspect <- -1 * aspect + 90
        aspect <- (aspect + 360) %% 360
    }
    sloper <- (pi/180) * as.matrix(slope)
    sloped <- as.matrix(slope)
    aspect <- (pi/180) * as.matrix(aspect)
    sunzenith <- (pi/180) * (90 - sunelev)
    sunazimuth <- (pi/180) * sunazimuth
    x.orig <- x
    x <- as.matrix(x)
    x[x == na.value] <- NA
    IL <- cos(sloper) * cos(sunzenith) + sin(sloper) * sin(sunzenith) * cos(sunazimuth - aspect)
    IL[IL == 0] <- IL.epsilon
    if(missing(coverclass)) 
        coverclass <- rep(TRUE, length(as.vector(x)))
    
    
        
        
    K <- data.frame(x = as.vector(x), IL = as.vector(IL), slope=as.vector(sloped))
    K <- K[coverclass, ]
    K <- K[!apply(K, 1, function(x)any(is.na(x))),]
    K <- K[K$x > 0, ]
    K <- K[K$IL > 0, ]
    
    targetslope <- (180/pi) * atan(.05)
    allcoef <- coefficients(lm(log10(K$x)[K$slope >= targetslope] ~ log10(K$IL/cos(sunzenith))[K$slope >= targetslope]))[[2]]
    results <- data.frame(matrix(0, nrow=length(slopeclass)-1, ncol=3))
    colnames(results) <- c(midpoint, n, k)
    results[,1] <- diff(slopeclass)/2 + slopeclass[1:length(slopeclass)-1]
    K.cut <- as.numeric(cut(K$slope, slopeclass)) 
    if(nrow(results) != length(table(K.cut))) stop(slopeclass is inappropriate for these data (empty classes)\n)
    results[,2] <- table(K.cut)
    
   for(i in sort(unique(K.cut[!is.na(K.cut)]))) {
        results[i, 3] <- coefficients(lm(log10(K$x)[K.cut == i] ~ log10(K$IL/cos(sunzenith))[K.cut == i]))[[2]]
    }
    model <- with(results, gam(k ~ s(midpoint, k=length(midpoint)-1)))
    K.all <- data.frame(midpoint = as.vector(as.matrix(slope)))
    K.all[K.all > max(slopeclass)] <- max(slopeclass) 
    K.all[K.all < min(slopeclass)] <- 0 
    K.all <- predict(model, newdata=K.all)
    K.all[K.all > 1] <- 1
    K.all[K.all < 0] <- 0
    xout <- as.vector(as.matrix(x)) * (cos(sunzenith)/as.vector(as.matrix(IL))) ^ K.all
    xout[K.all == 0 & !is.na(K.all)] <- as.vector(as.matrix(x))[K.all == 0 & !is.na(K.all)] 
    
    if(class(x.orig) == SpatialGridDataFrame) {
        x.orig@data[,1] <- as.vector(xout)
        xout <- x.orig
    }
    list(allcoef=allcoef, classcoef=results, model=model, minnaert=xout)
}
#+END_SRC
* movingwindow.R
#+BEGIN_SRC R 
movingwindow <-
function(x, kernel)
{
    
    results <- x
    x <- as.matrix(x)
    mwoffset <- (nrow(kernel)-1)/2
    newmat <- matrix(NA, nrow=nrow(x), ncol=ncol(x))
    for(i in (1+mwoffset):(nrow(x)-mwoffset)) {
        for(j in (1+mwoffset):(ncol(x)-mwoffset)) {
            newmat[i, j] <- sum(kernel * x[(i-mwoffset):(i+mwoffset), (j-mwoffset):(j+mwoffset)])
        }
    }
    
    if(class(results) == SpatialGridDataFrame)
        results@data[,1] <- as.vector(newmat)
    else if(is.data.frame(results))
        results <- data.frame(matrix(newmat, nrow=nrow(results), ncol=ncol(results)))
    else if(is.matrix(results))
        results <- matrix(newmat, nrow=nrow(results), ncol=ncol(results))
    results
}
#+END_SRC
* PIF.R
#+BEGIN_SRC R 
PIF <-
function(band3, band4, band7, level=.99) {
   
    if(is.character(band3)) {
        band3 <- read.asciigrid(band3)
        pifgrid <- band3
        band3 <- band3@data[,1]
    } else {
        pifgrid <- band3
        band3 <- as.vector(as.matrix(band3))
    } 
    
    if(is.character(band4)) {
        band4 <- read.asciigrid(band4)@data[,1]
    } else {
        band4 <- as.vector(as.matrix(band4))
    }
    if(is.character(band7)) {
        band7 <- read.asciigrid(band7)@data[,1]
    } else {
        band7 <- as.vector(as.matrix(band7))
    }
    band43 <- band4/band3
        
    band43.level <- quantile(band43, 1-level, na.rm=TRUE)
    band7.level <- quantile(band7, level, na.rm=TRUE)
    
    pifmask <- ifelse(band43 < band43.level & band7 > band7.level & band7 < 255, 1, 0)
    
    
    if(class(pifgrid) == SpatialGridDataFrame)
        pifgrid@data[,1] <- pifmask
    else if(is.data.frame(pifgrid))
        pifgrid <- data.frame(matrix(pifmask, nrow=nrow(pifgrid), ncol=ncol(pifgrid)))
    else if(is.matrix(pifgrid))
        pifgrid <- matrix(pifmask, nrow=nrow(pifgrid), ncol=ncol(pifgrid))
    else 
        pifgrid <- pifmask
    
    pifgrid
}
#+END_SRC
* radiocorr.R
#+BEGIN_SRC R 
radiocorr <-
function(x, gain, offset, Grescale, Brescale, sunelev, satzenith=0, edist, Esun, Lhaze, method=apparentreflectance)
{
    results <- x
    x <- as.vector(as.matrix(x))
    METHODS <- c(apparentreflectance, DOS, COSTZ, DOS4)
    method <- pmatch(method, METHODS)
    if (is.na(method)) 
        stop(invalid method)
    if (method == -1) 
        stop(ambiguous method)
    suntheta <- (90-sunelev) * pi / 180
    suntheta <- cos(suntheta)
    satzenith <- satzenith * pi / 180
    satphi <- cos(satzenith)
    
    
    if(missing(offset)) {
        offset <- -1 * Brescale / Grescale
        gain <- 1/Grescale
    }
    
    if(method == 1) {
    
        TAUz <- 1.0
        TAUv <- 1.0
        Edown <- 0.0 
        Lhaze <- 0.0
    }
    else if(method == 2) {
    
        TAUz <- 1.0
        TAUv <- 1.0
        Edown <- 0.0 
        if(missing(Lhaze)) stop(This model requires Lhaze to be specified.\n)	
    }
    else if(method == 3) {
    
        TAUz <- suntheta
        TAUv <- satphi
        Edown <- 0.0
        if(missing(Lhaze)) stop(This model requires Lhaze to be specified.\n)
    } 
    else if(method == 4) {
    
        TAUv <- TAUz <- 1
        taudiff <- 1
            tau <- 9999
            Edown <- 0
            
        Lhaze.orig <- Lhaze
        
        while(abs(taudiff) > 0.0000001) {
            taudiff <- tau
            
            
            
            
            Eo <- Esun/edist^2
            Lp <- (Lhaze - offset) / gain - 0.01 * (Eo * suntheta * TAUz + Edown) * TAUv / pi
            taustep <- 1 - (4 * pi * Lp) / (Eo * suntheta)
            while(taustep < 0) {
                Lhaze <- Lhaze - 1
                Lp <- (Lhaze - offset) / gain - 0.01 * (Eo * suntheta * TAUz + Edown) * TAUv / pi
                taustep <- 1 - (4 * pi * Lp) / (Eo * suntheta)
            }
            
            tau <- -1 * suntheta * log(1 - (4 * pi * Lp) / (Eo * suntheta))
            TAUv <- exp(-1 * tau / satphi)
            TAUz <- exp(-1 * tau / suntheta)		
            Edown <- pi * Lp
            
                    taudiff <- taudiff - tau
        }
            
        if(!identical(Lhaze.orig, Lhaze)) warning(paste(Lhaze adjusted from , Lhaze.orig,  to , Lhaze, sep=))
        
        if(missing(Lhaze)) stop(This model requires Lhaze to be specified.\n)
    
    }
    
    
    
    
    
    x <- x - Lhaze
    x <- (x - offset) / gain
    
    
    x <-  (pi * edist^2 * x) / (TAUv * (Esun * suntheta * TAUz + Edown))
    
    if(class(results) == SpatialGridDataFrame)
        results@data[,1] <- x
    else if(is.data.frame(x))
        results <- data.frame(matrix(x, nrow=nrow(results), ncol=ncol(results)))
    else 
        results <- x
    
    results
}
#+END_SRC
* RCS.R
#+BEGIN_SRC R 
RCS <-
function(data.tc, level=.01) {
    rcsgrid <- data.tc$Brightness
    
    brightness <- as.vector(as.matrix(data.tc$Brightness))
    greenness <- as.vector(as.matrix(data.tc$Greenness))
        
    bright.llevel <- quantile(brightness, level, na.rm=TRUE)
    bright.ulevel <- quantile(brightness, 1-level, na.rm=TRUE)
    green.level <- quantile(greenness, level, na.rm=TRUE)
    
    rcsmask <- ifelse(brightness < bright.llevel & greenness < green.level, 1, 0)
    rcsmask <- ifelse(brightness > bright.ulevel & greenness < green.level, 1, rcsmask)
    
    if(class(rcsgrid) == SpatialGridDataFrame) 
        rcsgrid@data[,1] <- rcsmask
    else if(is.data.frame(rcsgrid)) 
        rcsgrid <- data.frame(matrix(rcsmask, nrow=nrow(rcsgrid), ncol=ncol(rcsgrid)))
    else if(is.matrix(rcsgrid)) 
        rcsgrid <- matrix(rcsmask, nrow=nrow(rcsgrid), ncol=ncol(rcsgrid))
    else 
        rcsgrid <- rcsmask
    rcsgrid
}
#+END_SRC
* relnorm.R
#+BEGIN_SRC R 
relnorm <-
function(master, tofix, mask, method=MA, nperm=1000)
{
    
    
    
    
    results <- tofix
    master <- as.vector(as.matrix(master))
    tofix <- as.vector(as.matrix(tofix))
    if(missing(mask)) { 
        mask <- rep(NA, length(master))
    } else {
        mask <- as.vector(as.matrix(mask))
    }
    master.mask <- master[is.na(mask)]
    x.mask <- tofix[is.na(mask)]
    master.lm <- lmodel2(master.mask ~ x.mask, nperm=nperm)
    
    master.lm <- master.lm$regression.results[master.lm$regression.results[, Method] == method, ]
    names(master.lm) <- gsub(^ *, , names(master.lm))
    
    x.transform <- master.lm$Slope * tofix + master.lm$Intercept
    
    x.transform[!is.na(mask)] <- NA
    
    if(class(results) == SpatialGridDataFrame)
        results@data[,1] <- x.transform
    else if(is.data.frame(results))
        results <- data.frame(matrix(x.transform, nrow=nrow(results), ncol=ncol(results)))
    else if(is.matrix(results))
        results <- matrix(x.transform, nrow=nrow(results), ncol=ncol(results))
    else 
        results <- x.transform
    list(regression.results = master.lm, newimage = results)
}
#+END_SRC
* slopeasp.R
#+BEGIN_SRC R 
slopeasp <- function (x, EWres, NSres, EWkernel, NSkernel, smoothing = 1) 
{
    if(class(x) == SpatialGridDataFrame) {
    	xmat <- t(as.matrix(x))
    }
    else {
       xmat <- as.matrix(x)
    }
    if (missing(EWres)) {
        if (class(x) == SpatialGridDataFrame) {
            EWres <- x@grid@cellsize[1]
        }
        else {
            stop(EWres must be specified if x is not a SpatialGridDataFrame.\n)
        }
    }
    if (missing(NSres)) {
        if (class(x) == SpatialGridDataFrame) {
            NSres <- x@grid@cellsize[2]
        }
        else {
            stop(NSres must be specified if x is not a SpatialGridDataFrame.\n)
        }
    }
    if (missing(EWkernel)) {
        EWkernel <- matrix(c(-1/8, 0, 1/8, -2/8, 0, 2/8, -1/8, 
            0, 1/8), ncol = 3, nrow = 3, byrow = TRUE)
    }
    EW.mat <- movingwindow(xmat, EWkernel)/EWres
    if (missing(NSkernel)) {
        NSkernel <- matrix(c(1/8, 2/8, 1/8, 0, 0, 0, -1/8, -2/8, 
            -1/8), ncol = 3, nrow = 3, byrow = TRUE)
    }
    NS.mat <- movingwindow(xmat, NSkernel)/NSres
    slope <- atan(sqrt(EW.mat^2 + NS.mat^2)/smoothing)
    slope <- (180/pi) * slope
    aspect <- 180 - (180/pi) * atan(NS.mat/EW.mat) + 90 * (EW.mat/abs(EW.mat))
    aspect[slope == 0] <- 0
    if (class(x) == SpatialGridDataFrame) {
        temp <- x
        temp@data[, 1] <- as.vector(t(aspect))
        aspect <- temp
        temp@data[, 1] <- as.vector(t(slope))
        slope <- temp
    }
    list(slope = slope, aspect = aspect)
}
#+END_SRC
* tasscap.R
#+BEGIN_SRC R 
tasscap <-
function(basename, sat=7)
{
    
    
    
        
        
        
        
    band1 <- get(paste(basename, 1, sep=))
    band2 <- get(paste(basename, 2, sep=))
    band3 <- get(paste(basename, 3, sep=))
    band4 <- get(paste(basename, 4, sep=))
    band5 <- get(paste(basename, 5, sep=))
    band7 <- get(paste(basename, 7, sep=))
    if(class(band1) == SpatialGridDataFrame) {
    	output.sgdf <- band1
	    use.sgdf <- TRUE
    	band1 <- band1@data[,1]
    	band2 <- band2@data[,1]
    	band3 <- band3@data[,1]
    	band4 <- band4@data[,1]
    	band5 <- band5@data[,1]
    	band7 <- band7@data[,1]
    }
    all.bands <- cbind(band1, band2, band3, band4, band5, band7)
        
    if(sat == 7) {
        tc.coef <- matrix(c(
        
    
     0.3561,     0.3972,      0.3904,    0.6966,    0.2286,       0.1596,    
    -0.3344,    -0.3544,     -0.4556,    0.6966,   -0.0242,      -0.2630,    
     0.2626,     0.2141,      0.0926,    0.0656,   -0.7629,      -0.5388,    
     0.0805,    -0.0498,      0.1950,   -0.1327,    0.5752,      -0.7775,    
    -0.7252,    -0.0202,      0.6683,    0.0631,   -0.1494,      -0.0274,    
     0.4000,    -0.8172,      0.3832,    0.0602,   -0.1095,       0.0985     
    ), ncol=6, byrow=TRUE)
    } else if(sat == 5) {
        tc.coef <- matrix(c(
        
    
     0.2043,     0.4158,      0.5524,    0.5741,    0.3124,       0.2303,    
    -0.1603,    -0.2819,     -0.4934,    0.7940,    0.0002,      -0.1446,    
     0.0315,     0.2021,      0.3102,    0.1594,    0.6806,      -0.6109,    
    -0.2117,    -0.0284,      0.1302,   -0.1007,    0.6529,      -0.7078,    
    -0.8669,    -0.1835,      0.3856,    0.0408,    0.1132,       0.2272,    
     0.3677,    -0.8200,      0.4354,    0.0518,    0.0066,      -0.0104     
    ), ncol=6, byrow=TRUE)
    } else {
        stop(sat not recognized.\n)
    }
    colnames(tc.coef) <- c(band1, band2, band3, band4, band5, band7)
    rownames(tc.coef) <- c(Brightness, Greenness, Wetness, Fourth, Fifth, Sixth)
    tc.coef <- t(tc.coef)
    output <- all.bands %*% tc.coef
    output <- as.data.frame(output[,1:3])
    if(use.sgdf) {
    	Brightness <- output.sgdf
	Brightness@data[,1] <- output[, Brightness]
    	Greenness <- output.sgdf
	Greenness@data[,1] <- output[, Greenness]
    	Wetness <- output.sgdf
	Wetness@data[,1] <- output[, Wetness]
	output <- list(Brightness=Brightness, Greenness=Greenness, Wetness=Wetness)
    }
    output
}
#+END_SRC
* thermalband.R
#+BEGIN_SRC R 
thermalband <-
function(x, band)
{
	
	if(band == 6) band.coefs <- c(0.055376, 1.18, 607.76, 1260.56)
	if(band == 61) band.coefs <- c(0.067087, -0.07, 666.09, 1282.71)
	if(band == 62) band.coefs <- c(0.037205, 3.16, 666.09, 1282.7)
	results <- x
	x <- as.vector(as.matrix(x))
	
	x <- x * band.coefs[1] + band.coefs[2]
	x <- band.coefs[4] / log(band.coefs[3]/x + 1)
    
    if(class(results) == SpatialGridDataFrame)
        results@data[,1] <- x
    else if(is.data.frame(results))
        results <- data.frame(matrix(x, nrow=nrow(results), ncol=ncol(results)))
    else if(is.matrix(results))
        results <- matrix(x, nrow=nrow(results), ncol=ncol(results))
    else 
        results <- x
    
    results
}
#+END_SRC
* topocorr.R
#+BEGIN_SRC R 
topocorr <-
function(x, slope, aspect, sunelev, sunazimuth, method=cosine, na.value=NA, GRASS.aspect=FALSE, IL.epsilon=0.000001)
{
    if(GRASS.aspect) {
        aspect <- as.matrix(aspect)
        aspect <- -1 * aspect + 90
        aspect <- (aspect + 360) %% 360
    }
    slope <- (pi/180) * as.matrix(slope)
    aspect <- (pi/180) * as.matrix(aspect)
    sunzenith <- (pi/180) * (90 - sunelev)
    sunazimuth <- (pi/180) * sunazimuth
    x.orig <- x
    x <- as.matrix(x)
    x[x == na.value] <- NA
    IL <- cos(slope) * cos(sunzenith) + sin(slope) * sin(sunzenith) * cos(sunazimuth - aspect)
    IL[IL == 0] <- IL.epsilon
        METHODS <- c(cosine, improvedcosine, minnaert, minslope, ccorrection, gamma, SCS, illumination)
        method <- pmatch(method, METHODS)
        if (is.na(method)) 
            stop(invalid method)
        if (method == -1) 
            stop(ambiguous method)
    if(method == 1){
        
        xout <- x * (cos(sunzenith)/IL)
    }
    else if(method == 2) {
    
        ILmean <- mean(as.vector(IL), na.rm=TRUE)
        xout <- x + (x * (ILmean - IL)/ILmean)
    }
    else if(method == 3) {
        
        
        
        targetslope <- atan(.05)
        if(all(x[slope >= targetslope] < 0, na.rm=TRUE)) {
            K <- 1
        }
        else {
            
            
            K <- data.frame(y = as.vector(x[slope >= targetslope]), x = as.vector(IL[slope >= targetslope])/cos(sunzenith))
            K <- K[!apply(K, 1, function(x)any(is.na(x))),]
            K <- K[K$x > 0, ]
            K <- K[K$y > 0, ]
            K <- lm(log10(K$y) ~ log10(K$x))
            K <- coefficients(K)[[2]] 
            if(K > 1) K <- 1
            if(K < 0) K <- 0
        }
        xout <- x * (cos(sunzenith)/IL) ^ K
    }
    else if(method == 4) {
        
        
        
        targetslope <- atan(.05)
        if(all(x[slope >= targetslope] < 0, na.rm=TRUE)) {
            K <- 1
        }
        else {
            
            
            K <- data.frame(y=as.vector(x[slope >= targetslope]), x=as.vector(IL[slope >= targetslope])/cos(sunzenith))
            K <- K[!apply(K, 1, function(x)any(is.na(x))),]
            K <- K[K$x > 0, ]
            K <- K[K$y > 0, ]
            K <- lm(log10(K$y) ~ log10(K$x))
            K <- coefficients(K)[[2]] 
            if(K > 1) K <- 1
            if(K < 0) K <- 0
        }
        xout <- x * cos(slope) * (cos(sunzenith) / (IL * cos(slope))) ^ K
    }
    else if(method == 5) {
        
        band.lm <- lm(as.vector(x) ~ as.vector(IL))
        C <- coefficients(band.lm)[[1]]/coefficients(band.lm)[[2]]
        xout <- x * (cos(sunzenith) + C) / (IL + C)
    }
    else if(method == 6) {
        
        
        viewterrain <- pi/2 - slope
        xout <- x * (cos(sunzenith) + cos(pi / 2)) / (IL + cos(viewterrain))
    }
    else if(method == 7) {
        
        xout <- x * (cos(sunzenith) * cos(slope))/IL
    }
    else if(method == 8) {
        
        xout <- IL
    }
    
    if(method != 8) 
        xout[slope == 0 & !is.na(slope)] <- x[slope == 0 & !is.na(slope)]
    
    if(class(x.orig) == SpatialGridDataFrame) {
        x.orig@data[,1] <- as.vector(xout)
        xout <- x.orig
    }
    xout
}
#+END_SRC
